from __future__ import annotations
from typing_extensions import Buffer
from _typeshed import ReadableBuffer, WriteableBuffer
import numpy.typing as npt
import numpy as np

from ..wrapper.ndi_structs import FourCC


class ImageFormat:
    def __init__(
        self,
        fourcc: FourCC,
        width: int,
        height: int,
        expand_chroma: bool,
        line_stride: int = 0,
    ) -> None: ...
    @property
    def width(self) -> int: ...
    @width.setter
    def width(self, value: int): ...

    @property
    def height(self) -> int: ...
    @height.setter
    def height(self, value: int): ...

    @property
    def resolution(self) -> tuple[int, int]: ...

    @property
    def chroma_width(self) -> int: ...

    @property
    def chroma_height(self) -> int: ...

    @property
    def fourcc(self) -> FourCC: ...

    @property
    def line_stride(self) -> int: ...

    @property
    def force_line_stride(self) -> bool: ...

    @property
    def size_in_bytes(self) -> int: ...

    @property
    def bits_per_pixel(self) -> int: ...

    @property
    def padded_bits_per_pixel(self) -> int: ...

    @property
    def num_planes(self) -> int: ...

    @property
    def num_components(self) -> int: ...

    @property
    def is_16bit(self) -> bool: ...

    @property
    def expand_chroma(self) -> bool: ...
    @expand_chroma.setter
    def expand_chroma(self, value: bool): ...

    @property
    def shape(self) -> tuple[int, int, int]: ...

    def set_resolution(self, width: int, height: int) -> None: ...
    def set_line_stride(self, line_stride: int, force: bool) -> None: ...
    def unpack_into(self, src: ReadableBuffer|npt.NDArray[np.uint8], dest: WriteableBuffer|npt.NDArray[np.uint8|np.uint16]) -> None: ...
    def unpack(self, src: ReadableBuffer|npt.NDArray[np.uint8]) -> npt.NDArray[np.uint8|np.uint16]: ...
    def pack_into(self, src: ReadableBuffer|npt.NDArray[np.uint8|np.uint16], dest: WriteableBuffer|npt.NDArray[np.uint8]) -> None: ...
    def pack(self, src: ReadableBuffer|npt.NDArray[np.uint8|np.uint16]) -> npt.NDArray[np.uint8]: ...


class ImageReader(ImageFormat): ...

# def feed_from_c_ptr(reader: ImageReader, src: npt.NDArray[np.uint8], dest: npt.NDArray[np.uint8|np.uint16]) -> None: ...
